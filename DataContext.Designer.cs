//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 22-10-2023 03:05:56 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace ThumbpayContext
{

    [DatabaseAttribute(Name = "thumbpay")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class ThumbpayDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(ThumbpayDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertBankDetail(BankDetail instance);
        partial void UpdateBankDetail(BankDetail instance);
        partial void DeleteBankDetail(BankDetail instance);
        partial void InsertCardDetail(CardDetail instance);
        partial void UpdateCardDetail(CardDetail instance);
        partial void DeleteCardDetail(CardDetail instance);
        partial void InsertFingerDetail(FingerDetail instance);
        partial void UpdateFingerDetail(FingerDetail instance);
        partial void DeleteFingerDetail(FingerDetail instance);
        partial void InsertTransactionDetail(TransactionDetail instance);
        partial void UpdateTransactionDetail(TransactionDetail instance);
        partial void DeleteTransactionDetail(TransactionDetail instance);
        partial void InsertUserDetail(UserDetail instance);
        partial void UpdateUserDetail(UserDetail instance);
        partial void DeleteUserDetail(UserDetail instance);
        partial void InsertUserType(UserType instance);
        partial void UpdateUserType(UserType instance);
        partial void DeleteUserType(UserType instance);

        #endregion

        public ThumbpayDataContext() :
        base(@"Data Source=DD;Initial Catalog=thumbpay;Integrated Security=True;Persist Security Info=True;License Key=qHnH5wx/L422kFN4WQussVkqbelF0xGMaZi+DGL6lhFu+VTasW/ZRA22+dVoDbuQ64trDZsBMziLDE9kumHeTDKlcRSCvsotqn7rHn9VHFXS3Jmh/rFBVSxav6UlKmT4POdU+hnX8ACaigXhFdBiZ4NeHNVRNTqJ4fUTou0czKt8ATWxOB2MjUrprbYTV2ECFJOo2uLgwGzqeEpv1gGPLKR3p5DOKdeMu61FRAak23fmjt8PPQpz50o1E0r0FFdoQrJIYKkMxqRiD2IhVxlcVCvpIqR31rWwKJ1sNquGBMU=;", mappingSource)
        {
            OnCreated();
        }

        public ThumbpayDataContext(MappingSource mappingSource) :
        base(@"Data Source=DD;Initial Catalog=thumbpay;Integrated Security=True;Persist Security Info=True;License Key=qHnH5wx/L422kFN4WQussVkqbelF0xGMaZi+DGL6lhFu+VTasW/ZRA22+dVoDbuQ64trDZsBMziLDE9kumHeTDKlcRSCvsotqn7rHn9VHFXS3Jmh/rFBVSxav6UlKmT4POdU+hnX8ACaigXhFdBiZ4NeHNVRNTqJ4fUTou0czKt8ATWxOB2MjUrprbYTV2ECFJOo2uLgwGzqeEpv1gGPLKR3p5DOKdeMu61FRAak23fmjt8PPQpz50o1E0r0FFdoQrJIYKkMxqRiD2IhVxlcVCvpIqR31rWwKJ1sNquGBMU=;", mappingSource)
        {
            OnCreated();
        }

        public ThumbpayDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ThumbpayDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ThumbpayDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ThumbpayDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<BankDetail> BankDetails
        {
            get
            {
                return this.GetTable<BankDetail>();
            }
        }

        public Devart.Data.Linq.Table<CardDetail> CardDetails
        {
            get
            {
                return this.GetTable<CardDetail>();
            }
        }

        public Devart.Data.Linq.Table<FingerDetail> FingerDetails
        {
            get
            {
                return this.GetTable<FingerDetail>();
            }
        }

        public Devart.Data.Linq.Table<TransactionDetail> TransactionDetails
        {
            get
            {
                return this.GetTable<TransactionDetail>();
            }
        }

        public Devart.Data.Linq.Table<UserDetail> UserDetails
        {
            get
            {
                return this.GetTable<UserDetail>();
            }
        }

        public Devart.Data.Linq.Table<UserType> UserTypes
        {
            get
            {
                return this.GetTable<UserType>();
            }
        }
    }
}

namespace ThumbpayContext
{

    /// <summary>
    /// There are no comments for ThumbpayContext.BankDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.BankDetails")]
    public partial class BankDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BankId;

        private int _UserId;

        private string _AccountHolderName;

        private string _BankName;

        private string _AccountNumber;

        private string _IFSCCode;

        private int? _TotalBalance;
        #pragma warning restore 0649

        private EntityRef<UserDetail> _UserDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBankIdChanging(int value);
        partial void OnBankIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnAccountHolderNameChanging(string value);
        partial void OnAccountHolderNameChanged();
        partial void OnBankNameChanging(string value);
        partial void OnBankNameChanged();
        partial void OnAccountNumberChanging(string value);
        partial void OnAccountNumberChanged();
        partial void OnIFSCCodeChanging(string value);
        partial void OnIFSCCodeChanged();
        partial void OnTotalBalanceChanging(int? value);
        partial void OnTotalBalanceChanged();
        #endregion

        public BankDetail()
        {
            this._UserDetail  = default(EntityRef<UserDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BankId in the schema.
        /// </summary>
        [Column(Storage = "_BankId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BankId
        {
            get
            {
                return this._BankId;
            }
            set
            {
                if (this._BankId != value)
                {
                    this.OnBankIdChanging(value);
                    this.SendPropertyChanging("BankId");
                    this._BankId = value;
                    this.SendPropertyChanged("BankId");
                    this.OnBankIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._UserDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountHolderName in the schema.
        /// </summary>
        [Column(Storage = "_AccountHolderName", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AccountHolderName
        {
            get
            {
                return this._AccountHolderName;
            }
            set
            {
                if (this._AccountHolderName != value)
                {
                    this.OnAccountHolderNameChanging(value);
                    this.SendPropertyChanging("AccountHolderName");
                    this._AccountHolderName = value;
                    this.SendPropertyChanged("AccountHolderName");
                    this.OnAccountHolderNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BankName in the schema.
        /// </summary>
        [Column(Storage = "_BankName", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BankName
        {
            get
            {
                return this._BankName;
            }
            set
            {
                if (this._BankName != value)
                {
                    this.OnBankNameChanging(value);
                    this.SendPropertyChanging("BankName");
                    this._BankName = value;
                    this.SendPropertyChanged("BankName");
                    this.OnBankNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountNumber in the schema.
        /// </summary>
        [Column(Storage = "_AccountNumber", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AccountNumber
        {
            get
            {
                return this._AccountNumber;
            }
            set
            {
                if (this._AccountNumber != value)
                {
                    this.OnAccountNumberChanging(value);
                    this.SendPropertyChanging("AccountNumber");
                    this._AccountNumber = value;
                    this.SendPropertyChanged("AccountNumber");
                    this.OnAccountNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IFSCCode in the schema.
        /// </summary>
        [Column(Name = @"IFSC_Code", Storage = "_IFSCCode", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IFSCCode
        {
            get
            {
                return this._IFSCCode;
            }
            set
            {
                if (this._IFSCCode != value)
                {
                    this.OnIFSCCodeChanging(value);
                    this.SendPropertyChanging("IFSCCode");
                    this._IFSCCode = value;
                    this.SendPropertyChanged("IFSCCode");
                    this.OnIFSCCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalBalance in the schema.
        /// </summary>
        [Column(Storage = "_TotalBalance", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? TotalBalance
        {
            get
            {
                return this._TotalBalance;
            }
            set
            {
                if (this._TotalBalance != value)
                {
                    this.OnTotalBalanceChanging(value);
                    this.SendPropertyChanging("TotalBalance");
                    this._TotalBalance = value;
                    this.SendPropertyChanged("TotalBalance");
                    this.OnTotalBalanceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UserDetail_BankDetail", Storage="_UserDetail", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
        public UserDetail UserDetail
        {
            get
            {
                return this._UserDetail.Entity;
            }
            set
            {
                UserDetail previousValue = this._UserDetail.Entity;
                if ((previousValue != value) || (this._UserDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UserDetail");
                    if (previousValue != null)
                    {
                        this._UserDetail.Entity = null;
                        previousValue.BankDetails.Remove(this);
                    }
                    this._UserDetail.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.UserId;
                        value.BankDetails.Add(this);
                    }
                    else
                    {
                        this._UserId = default(int);
                    }
                    this.SendPropertyChanged("UserDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ThumbpayContext.CardDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.CardDetails")]
    public partial class CardDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CardId;

        private int _UserId;

        private string _CardNumber;

        private string _EXdate;

        private string _Cvv;

        private string _HolderName;

        private int? _TotalBalance;
        #pragma warning restore 0649

        private EntityRef<UserDetail> _UserDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCardIdChanging(int value);
        partial void OnCardIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnCardNumberChanging(string value);
        partial void OnCardNumberChanged();
        partial void OnEXdateChanging(string value);
        partial void OnEXdateChanged();
        partial void OnCvvChanging(string value);
        partial void OnCvvChanged();
        partial void OnHolderNameChanging(string value);
        partial void OnHolderNameChanged();
        partial void OnTotalBalanceChanging(int? value);
        partial void OnTotalBalanceChanged();
        #endregion

        public CardDetail()
        {
            this._UserDetail  = default(EntityRef<UserDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CardId in the schema.
        /// </summary>
        [Column(Storage = "_CardId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CardId
        {
            get
            {
                return this._CardId;
            }
            set
            {
                if (this._CardId != value)
                {
                    this.OnCardIdChanging(value);
                    this.SendPropertyChanging("CardId");
                    this._CardId = value;
                    this.SendPropertyChanged("CardId");
                    this.OnCardIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._UserDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CardNumber in the schema.
        /// </summary>
        [Column(Storage = "_CardNumber", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string CardNumber
        {
            get
            {
                return this._CardNumber;
            }
            set
            {
                if (this._CardNumber != value)
                {
                    this.OnCardNumberChanging(value);
                    this.SendPropertyChanging("CardNumber");
                    this._CardNumber = value;
                    this.SendPropertyChanged("CardNumber");
                    this.OnCardNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EXdate in the schema.
        /// </summary>
        [Column(Storage = "_EXdate", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string EXdate
        {
            get
            {
                return this._EXdate;
            }
            set
            {
                if (this._EXdate != value)
                {
                    this.OnEXdateChanging(value);
                    this.SendPropertyChanging("EXdate");
                    this._EXdate = value;
                    this.SendPropertyChanged("EXdate");
                    this.OnEXdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cvv in the schema.
        /// </summary>
        [Column(Name = @"cvv", Storage = "_Cvv", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Cvv
        {
            get
            {
                return this._Cvv;
            }
            set
            {
                if (this._Cvv != value)
                {
                    this.OnCvvChanging(value);
                    this.SendPropertyChanging("Cvv");
                    this._Cvv = value;
                    this.SendPropertyChanged("Cvv");
                    this.OnCvvChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HolderName in the schema.
        /// </summary>
        [Column(Storage = "_HolderName", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string HolderName
        {
            get
            {
                return this._HolderName;
            }
            set
            {
                if (this._HolderName != value)
                {
                    this.OnHolderNameChanging(value);
                    this.SendPropertyChanging("HolderName");
                    this._HolderName = value;
                    this.SendPropertyChanged("HolderName");
                    this.OnHolderNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalBalance in the schema.
        /// </summary>
        [Column(Storage = "_TotalBalance", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? TotalBalance
        {
            get
            {
                return this._TotalBalance;
            }
            set
            {
                if (this._TotalBalance != value)
                {
                    this.OnTotalBalanceChanging(value);
                    this.SendPropertyChanging("TotalBalance");
                    this._TotalBalance = value;
                    this.SendPropertyChanged("TotalBalance");
                    this.OnTotalBalanceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UserDetail_CardDetail", Storage="_UserDetail", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
        public UserDetail UserDetail
        {
            get
            {
                return this._UserDetail.Entity;
            }
            set
            {
                UserDetail previousValue = this._UserDetail.Entity;
                if ((previousValue != value) || (this._UserDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UserDetail");
                    if (previousValue != null)
                    {
                        this._UserDetail.Entity = null;
                        previousValue.CardDetails.Remove(this);
                    }
                    this._UserDetail.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.UserId;
                        value.CardDetails.Add(this);
                    }
                    else
                    {
                        this._UserId = default(int);
                    }
                    this.SendPropertyChanged("UserDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ThumbpayContext.FingerDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.FingerDetails")]
    public partial class FingerDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _FingerId;

        private int _UserId;

        private string _FingerData;
        #pragma warning restore 0649

        private EntityRef<UserDetail> _UserDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFingerIdChanging(int value);
        partial void OnFingerIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnFingerDataChanging(string value);
        partial void OnFingerDataChanged();
        #endregion

        public FingerDetail()
        {
            this._UserDetail  = default(EntityRef<UserDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for FingerId in the schema.
        /// </summary>
        [Column(Storage = "_FingerId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int FingerId
        {
            get
            {
                return this._FingerId;
            }
            set
            {
                if (this._FingerId != value)
                {
                    this.OnFingerIdChanging(value);
                    this.SendPropertyChanging("FingerId");
                    this._FingerId = value;
                    this.SendPropertyChanged("FingerId");
                    this.OnFingerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._UserDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FingerData in the schema.
        /// </summary>
        [Column(Storage = "_FingerData", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FingerData
        {
            get
            {
                return this._FingerData;
            }
            set
            {
                if (this._FingerData != value)
                {
                    this.OnFingerDataChanging(value);
                    this.SendPropertyChanging("FingerData");
                    this._FingerData = value;
                    this.SendPropertyChanged("FingerData");
                    this.OnFingerDataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UserDetail_FingerDetail", Storage="_UserDetail", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
        public UserDetail UserDetail
        {
            get
            {
                return this._UserDetail.Entity;
            }
            set
            {
                UserDetail previousValue = this._UserDetail.Entity;
                if ((previousValue != value) || (this._UserDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UserDetail");
                    if (previousValue != null)
                    {
                        this._UserDetail.Entity = null;
                        previousValue.FingerDetails.Remove(this);
                    }
                    this._UserDetail.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.UserId;
                        value.FingerDetails.Add(this);
                    }
                    else
                    {
                        this._UserId = default(int);
                    }
                    this.SendPropertyChanged("UserDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ThumbpayContext.TransactionDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.TransactionDetails")]
    public partial class TransactionDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _TransactionId;

        private int _UserSenderId;

        private int _UserReciverId;

        private long _Amount;

        private System.DateTime _DateTime;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTransactionIdChanging(int value);
        partial void OnTransactionIdChanged();
        partial void OnUserSenderIdChanging(int value);
        partial void OnUserSenderIdChanged();
        partial void OnUserReciverIdChanging(int value);
        partial void OnUserReciverIdChanged();
        partial void OnAmountChanging(long value);
        partial void OnAmountChanged();
        partial void OnDateTimeChanging(System.DateTime value);
        partial void OnDateTimeChanged();
        #endregion

        public TransactionDetail()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        [Column(Storage = "_TransactionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging("TransactionId");
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserSenderId in the schema.
        /// </summary>
        [Column(Storage = "_UserSenderId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserSenderId
        {
            get
            {
                return this._UserSenderId;
            }
            set
            {
                if (this._UserSenderId != value)
                {
                    this.OnUserSenderIdChanging(value);
                    this.SendPropertyChanging("UserSenderId");
                    this._UserSenderId = value;
                    this.SendPropertyChanged("UserSenderId");
                    this.OnUserSenderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserReciverId in the schema.
        /// </summary>
        [Column(Storage = "_UserReciverId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserReciverId
        {
            get
            {
                return this._UserReciverId;
            }
            set
            {
                if (this._UserReciverId != value)
                {
                    this.OnUserReciverIdChanging(value);
                    this.SendPropertyChanging("UserReciverId");
                    this._UserReciverId = value;
                    this.SendPropertyChanged("UserReciverId");
                    this.OnUserReciverIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Storage = "_Amount", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging("Amount");
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ThumbpayContext.UserDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserDetails")]
    public partial class UserDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserId;

        private int _UserTypeId;

        private string _Fname;

        private string _Lname;

        private string _PhoneNumber;

        private string _Email;

        private string _Password;
        #pragma warning restore 0649

        private EntitySet<BankDetail> _BankDetails;

        private EntitySet<CardDetail> _CardDetails;

        private EntitySet<FingerDetail> _FingerDetails;

        private EntityRef<UserType> _UserType;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnUserTypeIdChanging(int value);
        partial void OnUserTypeIdChanged();
        partial void OnFnameChanging(string value);
        partial void OnFnameChanged();
        partial void OnLnameChanging(string value);
        partial void OnLnameChanged();
        partial void OnPhoneNumberChanging(string value);
        partial void OnPhoneNumberChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        #endregion

        public UserDetail()
        {
            this._BankDetails = new EntitySet<BankDetail>(new Action<BankDetail>(this.attach_BankDetails), new Action<BankDetail>(this.detach_BankDetails));
            this._CardDetails = new EntitySet<CardDetail>(new Action<CardDetail>(this.attach_CardDetails), new Action<CardDetail>(this.detach_CardDetails));
            this._FingerDetails = new EntitySet<FingerDetail>(new Action<FingerDetail>(this.attach_FingerDetails), new Action<FingerDetail>(this.detach_FingerDetails));
            this._UserType  = default(EntityRef<UserType>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserTypeId in the schema.
        /// </summary>
        [Column(Storage = "_UserTypeId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UserTypeId
        {
            get
            {
                return this._UserTypeId;
            }
            set
            {
                if (this._UserTypeId != value)
                {
                    if (this._UserType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserTypeIdChanging(value);
                    this.SendPropertyChanging("UserTypeId");
                    this._UserTypeId = value;
                    this.SendPropertyChanged("UserTypeId");
                    this.OnUserTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fname in the schema.
        /// </summary>
        [Column(Storage = "_Fname", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Fname
        {
            get
            {
                return this._Fname;
            }
            set
            {
                if (this._Fname != value)
                {
                    this.OnFnameChanging(value);
                    this.SendPropertyChanging("Fname");
                    this._Fname = value;
                    this.SendPropertyChanged("Fname");
                    this.OnFnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lname in the schema.
        /// </summary>
        [Column(Storage = "_Lname", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Lname
        {
            get
            {
                return this._Lname;
            }
            set
            {
                if (this._Lname != value)
                {
                    this.OnLnameChanging(value);
                    this.SendPropertyChanging("Lname");
                    this._Lname = value;
                    this.SendPropertyChanged("Lname");
                    this.OnLnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [Column(Storage = "_PhoneNumber", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PhoneNumber
        {
            get
            {
                return this._PhoneNumber;
            }
            set
            {
                if (this._PhoneNumber != value)
                {
                    this.OnPhoneNumberChanging(value);
                    this.SendPropertyChanging("PhoneNumber");
                    this._PhoneNumber = value;
                    this.SendPropertyChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BankDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UserDetail_BankDetail", Storage="_BankDetails", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
        public EntitySet<BankDetail> BankDetails
        {
            get
            {
                return this._BankDetails;
            }
            set
            {
                this._BankDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CardDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UserDetail_CardDetail", Storage="_CardDetails", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
        public EntitySet<CardDetail> CardDetails
        {
            get
            {
                return this._CardDetails;
            }
            set
            {
                this._CardDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for FingerDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UserDetail_FingerDetail", Storage="_FingerDetails", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
        public EntitySet<FingerDetail> FingerDetails
        {
            get
            {
                return this._FingerDetails;
            }
            set
            {
                this._FingerDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for UserType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UserType_UserDetail", Storage="_UserType", ThisKey="UserTypeId", OtherKey="UserTypeId", IsForeignKey=true)]
        public UserType UserType
        {
            get
            {
                return this._UserType.Entity;
            }
            set
            {
                UserType previousValue = this._UserType.Entity;
                if ((previousValue != value) || (this._UserType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UserType");
                    if (previousValue != null)
                    {
                        this._UserType.Entity = null;
                        previousValue.UserDetails.Remove(this);
                    }
                    this._UserType.Entity = value;
                    if (value != null)
                    {
                        this._UserTypeId = value.UserTypeId;
                        value.UserDetails.Add(this);
                    }
                    else
                    {
                        this._UserTypeId = default(int);
                    }
                    this.SendPropertyChanged("UserType");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BankDetails(BankDetail entity)
        {
            this.SendPropertyChanging("BankDetails");
            entity.UserDetail = this;
        }
    
        private void detach_BankDetails(BankDetail entity)
        {
            this.SendPropertyChanging("BankDetails");
            entity.UserDetail = null;
        }

        private void attach_CardDetails(CardDetail entity)
        {
            this.SendPropertyChanging("CardDetails");
            entity.UserDetail = this;
        }
    
        private void detach_CardDetails(CardDetail entity)
        {
            this.SendPropertyChanging("CardDetails");
            entity.UserDetail = null;
        }

        private void attach_FingerDetails(FingerDetail entity)
        {
            this.SendPropertyChanging("FingerDetails");
            entity.UserDetail = this;
        }
    
        private void detach_FingerDetails(FingerDetail entity)
        {
            this.SendPropertyChanging("FingerDetails");
            entity.UserDetail = null;
        }
    }

    /// <summary>
    /// There are no comments for ThumbpayContext.UserType in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserType")]
    public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserTypeId;

        private string _UserTypeName;
        #pragma warning restore 0649

        private EntitySet<UserDetail> _UserDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserTypeIdChanging(int value);
        partial void OnUserTypeIdChanged();
        partial void OnUserTypeNameChanging(string value);
        partial void OnUserTypeNameChanged();
        #endregion

        public UserType()
        {
            this._UserDetails = new EntitySet<UserDetail>(new Action<UserDetail>(this.attach_UserDetails), new Action<UserDetail>(this.detach_UserDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserTypeId in the schema.
        /// </summary>
        [Column(Storage = "_UserTypeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserTypeId
        {
            get
            {
                return this._UserTypeId;
            }
            set
            {
                if (this._UserTypeId != value)
                {
                    this.OnUserTypeIdChanging(value);
                    this.SendPropertyChanging("UserTypeId");
                    this._UserTypeId = value;
                    this.SendPropertyChanged("UserTypeId");
                    this.OnUserTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserTypeName in the schema.
        /// </summary>
        [Column(Storage = "_UserTypeName", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserTypeName
        {
            get
            {
                return this._UserTypeName;
            }
            set
            {
                if (this._UserTypeName != value)
                {
                    this.OnUserTypeNameChanging(value);
                    this.SendPropertyChanging("UserTypeName");
                    this._UserTypeName = value;
                    this.SendPropertyChanged("UserTypeName");
                    this.OnUserTypeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UserType_UserDetail", Storage="_UserDetails", ThisKey="UserTypeId", OtherKey="UserTypeId", DeleteRule="NO ACTION")]
        public EntitySet<UserDetail> UserDetails
        {
            get
            {
                return this._UserDetails;
            }
            set
            {
                this._UserDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_UserDetails(UserDetail entity)
        {
            this.SendPropertyChanging("UserDetails");
            entity.UserType = this;
        }
    
        private void detach_UserDetails(UserDetail entity)
        {
            this.SendPropertyChanging("UserDetails");
            entity.UserType = null;
        }
    }

}
